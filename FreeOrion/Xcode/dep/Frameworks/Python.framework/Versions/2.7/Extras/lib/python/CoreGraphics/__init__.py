# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

from _CoreGraphics import *
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class CGFloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGFloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGFloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CoreGraphics.new_CGFloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CoreGraphics.delete_CGFloatArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _CoreGraphics.CGFloatArray___getitem__(*args)
    def __setitem__(*args): return _CoreGraphics.CGFloatArray___setitem__(*args)
    def cast(*args): return _CoreGraphics.CGFloatArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CoreGraphics.CGFloatArray_frompointer
    if _newclass:frompointer = staticmethod(_CoreGraphics.CGFloatArray_frompointer)
CGFloatArray_swigregister = _CoreGraphics.CGFloatArray_swigregister
CGFloatArray_swigregister(CGFloatArray)
CGFloatArray_frompointer = _CoreGraphics.CGFloatArray_frompointer

class CFType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFType, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CFType
    __del__ = lambda self : None;
CFType_swigregister = _CoreGraphics.CFType_swigregister
CFType_swigregister(CFType)

CGRectMinXEdge = _CoreGraphics.CGRectMinXEdge
CGRectMinYEdge = _CoreGraphics.CGRectMinYEdge
CGRectMaxXEdge = _CoreGraphics.CGRectMaxXEdge
CGRectMaxYEdge = _CoreGraphics.CGRectMaxYEdge
kCGPathElementMoveToPoint = _CoreGraphics.kCGPathElementMoveToPoint
kCGPathElementAddLineToPoint = _CoreGraphics.kCGPathElementAddLineToPoint
kCGPathElementAddQuadCurveToPoint = _CoreGraphics.kCGPathElementAddQuadCurveToPoint
kCGPathElementAddCurveToPoint = _CoreGraphics.kCGPathElementAddCurveToPoint
kCGPathElementCloseSubpath = _CoreGraphics.kCGPathElementCloseSubpath
kCGLineJoinMiter = _CoreGraphics.kCGLineJoinMiter
kCGLineJoinRound = _CoreGraphics.kCGLineJoinRound
kCGLineJoinBevel = _CoreGraphics.kCGLineJoinBevel
kCGLineCapButt = _CoreGraphics.kCGLineCapButt
kCGLineCapRound = _CoreGraphics.kCGLineCapRound
kCGLineCapSquare = _CoreGraphics.kCGLineCapSquare
kCGPathFill = _CoreGraphics.kCGPathFill
kCGPathEOFill = _CoreGraphics.kCGPathEOFill
kCGPathStroke = _CoreGraphics.kCGPathStroke
kCGPathFillStroke = _CoreGraphics.kCGPathFillStroke
kCGPathEOFillStroke = _CoreGraphics.kCGPathEOFillStroke
kCGTextFill = _CoreGraphics.kCGTextFill
kCGTextStroke = _CoreGraphics.kCGTextStroke
kCGTextFillStroke = _CoreGraphics.kCGTextFillStroke
kCGTextInvisible = _CoreGraphics.kCGTextInvisible
kCGTextFillClip = _CoreGraphics.kCGTextFillClip
kCGTextStrokeClip = _CoreGraphics.kCGTextStrokeClip
kCGTextFillStrokeClip = _CoreGraphics.kCGTextFillStrokeClip
kCGTextClip = _CoreGraphics.kCGTextClip
kCGEncodingFontSpecific = _CoreGraphics.kCGEncodingFontSpecific
kCGEncodingMacRoman = _CoreGraphics.kCGEncodingMacRoman
kCGInterpolationDefault = _CoreGraphics.kCGInterpolationDefault
kCGInterpolationNone = _CoreGraphics.kCGInterpolationNone
kCGInterpolationLow = _CoreGraphics.kCGInterpolationLow
kCGInterpolationHigh = _CoreGraphics.kCGInterpolationHigh
kCGImageAlphaNone = _CoreGraphics.kCGImageAlphaNone
kCGImageAlphaPremultipliedLast = _CoreGraphics.kCGImageAlphaPremultipliedLast
kCGImageAlphaPremultipliedFirst = _CoreGraphics.kCGImageAlphaPremultipliedFirst
kCGImageAlphaLast = _CoreGraphics.kCGImageAlphaLast
kCGImageAlphaFirst = _CoreGraphics.kCGImageAlphaFirst
kCGImageAlphaNoneSkipLast = _CoreGraphics.kCGImageAlphaNoneSkipLast
kCGImageAlphaNoneSkipFirst = _CoreGraphics.kCGImageAlphaNoneSkipFirst
kCGRenderingIntentDefault = _CoreGraphics.kCGRenderingIntentDefault
kCGRenderingIntentAbsoluteColorimetric = _CoreGraphics.kCGRenderingIntentAbsoluteColorimetric
kCGRenderingIntentRelativeColorimetric = _CoreGraphics.kCGRenderingIntentRelativeColorimetric
kCGRenderingIntentPerceptual = _CoreGraphics.kCGRenderingIntentPerceptual
kCGRenderingIntentSaturation = _CoreGraphics.kCGRenderingIntentSaturation
kCGPatternTilingNoDistortion = _CoreGraphics.kCGPatternTilingNoDistortion
kCGPatternTilingConstantSpacingMinimalDistortion = _CoreGraphics.kCGPatternTilingConstantSpacingMinimalDistortion
kCGPatternTilingConstantSpacing = _CoreGraphics.kCGPatternTilingConstantSpacing
kCGImageStatusUnexpectedEOF = _CoreGraphics.kCGImageStatusUnexpectedEOF
kCGImageStatusInvalidData = _CoreGraphics.kCGImageStatusInvalidData
kCGImageStatusUnknownType = _CoreGraphics.kCGImageStatusUnknownType
kCGImageStatusReadingHeader = _CoreGraphics.kCGImageStatusReadingHeader
kCGImageStatusIncomplete = _CoreGraphics.kCGImageStatusIncomplete
kCGImageStatusComplete = _CoreGraphics.kCGImageStatusComplete
kCGPDFMediaBox = _CoreGraphics.kCGPDFMediaBox
kCGPDFCropBox = _CoreGraphics.kCGPDFCropBox
kCGPDFBleedBox = _CoreGraphics.kCGPDFBleedBox
kCGPDFTrimBox = _CoreGraphics.kCGPDFTrimBox
kCGPDFArtBox = _CoreGraphics.kCGPDFArtBox
class CGAffineTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGAffineTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGAffineTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _CoreGraphics.CGAffineTransform_a_set
    __swig_getmethods__["a"] = _CoreGraphics.CGAffineTransform_a_get
    if _newclass:a = _swig_property(_CoreGraphics.CGAffineTransform_a_get, _CoreGraphics.CGAffineTransform_a_set)
    __swig_setmethods__["b"] = _CoreGraphics.CGAffineTransform_b_set
    __swig_getmethods__["b"] = _CoreGraphics.CGAffineTransform_b_get
    if _newclass:b = _swig_property(_CoreGraphics.CGAffineTransform_b_get, _CoreGraphics.CGAffineTransform_b_set)
    __swig_setmethods__["c"] = _CoreGraphics.CGAffineTransform_c_set
    __swig_getmethods__["c"] = _CoreGraphics.CGAffineTransform_c_get
    if _newclass:c = _swig_property(_CoreGraphics.CGAffineTransform_c_get, _CoreGraphics.CGAffineTransform_c_set)
    __swig_setmethods__["d"] = _CoreGraphics.CGAffineTransform_d_set
    __swig_getmethods__["d"] = _CoreGraphics.CGAffineTransform_d_get
    if _newclass:d = _swig_property(_CoreGraphics.CGAffineTransform_d_get, _CoreGraphics.CGAffineTransform_d_set)
    __swig_setmethods__["tx"] = _CoreGraphics.CGAffineTransform_tx_set
    __swig_getmethods__["tx"] = _CoreGraphics.CGAffineTransform_tx_get
    if _newclass:tx = _swig_property(_CoreGraphics.CGAffineTransform_tx_get, _CoreGraphics.CGAffineTransform_tx_set)
    __swig_setmethods__["ty"] = _CoreGraphics.CGAffineTransform_ty_set
    __swig_getmethods__["ty"] = _CoreGraphics.CGAffineTransform_ty_get
    if _newclass:ty = _swig_property(_CoreGraphics.CGAffineTransform_ty_get, _CoreGraphics.CGAffineTransform_ty_set)
    def translate(*args): return _CoreGraphics.CGAffineTransform_translate(*args)
    def scale(*args): return _CoreGraphics.CGAffineTransform_scale(*args)
    def rotate(*args): return _CoreGraphics.CGAffineTransform_rotate(*args)
    def invert(*args): return _CoreGraphics.CGAffineTransform_invert(*args)
    def concat(*args): return _CoreGraphics.CGAffineTransform_concat(*args)
    def equalToTransform(*args): return _CoreGraphics.CGAffineTransform_equalToTransform(*args)
    def transformIsIdentity(*args): return _CoreGraphics.CGAffineTransform_transformIsIdentity(*args)
    def __init__(self, *args): 
        this = _CoreGraphics.new_CGAffineTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CoreGraphics.delete_CGAffineTransform
    __del__ = lambda self : None;
CGAffineTransform_swigregister = _CoreGraphics.CGAffineTransform_swigregister
CGAffineTransform_swigregister(CGAffineTransform)

CGAffineTransformMake = _CoreGraphics.CGAffineTransformMake
CGAffineTransformMakeTranslation = _CoreGraphics.CGAffineTransformMakeTranslation
CGAffineTransformMakeScale = _CoreGraphics.CGAffineTransformMakeScale
CGAffineTransformMakeRotation = _CoreGraphics.CGAffineTransformMakeRotation
class CGPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _CoreGraphics.CGPoint_x_set
    __swig_getmethods__["x"] = _CoreGraphics.CGPoint_x_get
    if _newclass:x = _swig_property(_CoreGraphics.CGPoint_x_get, _CoreGraphics.CGPoint_x_set)
    __swig_setmethods__["y"] = _CoreGraphics.CGPoint_y_set
    __swig_getmethods__["y"] = _CoreGraphics.CGPoint_y_get
    if _newclass:y = _swig_property(_CoreGraphics.CGPoint_y_get, _CoreGraphics.CGPoint_y_set)
    def equalToPoint(*args): return _CoreGraphics.CGPoint_equalToPoint(*args)
    def applyAffineTransform(*args): return _CoreGraphics.CGPoint_applyAffineTransform(*args)
    def __init__(self, *args): 
        this = _CoreGraphics.new_CGPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CoreGraphics.delete_CGPoint
    __del__ = lambda self : None;
CGPoint_swigregister = _CoreGraphics.CGPoint_swigregister
CGPoint_swigregister(CGPoint)
cvar = _CoreGraphics.cvar
CGAffineTransformIdentity = cvar.CGAffineTransformIdentity

class CGSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _CoreGraphics.CGSize_width_set
    __swig_getmethods__["width"] = _CoreGraphics.CGSize_width_get
    if _newclass:width = _swig_property(_CoreGraphics.CGSize_width_get, _CoreGraphics.CGSize_width_set)
    __swig_setmethods__["height"] = _CoreGraphics.CGSize_height_set
    __swig_getmethods__["height"] = _CoreGraphics.CGSize_height_get
    if _newclass:height = _swig_property(_CoreGraphics.CGSize_height_get, _CoreGraphics.CGSize_height_set)
    def equalToSize(*args): return _CoreGraphics.CGSize_equalToSize(*args)
    def applyAffineTransform(*args): return _CoreGraphics.CGSize_applyAffineTransform(*args)
    def __init__(self, *args): 
        this = _CoreGraphics.new_CGSize(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CoreGraphics.delete_CGSize
    __del__ = lambda self : None;
CGSize_swigregister = _CoreGraphics.CGSize_swigregister
CGSize_swigregister(CGSize)

class CGRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _CoreGraphics.CGRect_origin_set
    __swig_getmethods__["origin"] = _CoreGraphics.CGRect_origin_get
    if _newclass:origin = _swig_property(_CoreGraphics.CGRect_origin_get, _CoreGraphics.CGRect_origin_set)
    __swig_setmethods__["size"] = _CoreGraphics.CGRect_size_set
    __swig_getmethods__["size"] = _CoreGraphics.CGRect_size_get
    if _newclass:size = _swig_property(_CoreGraphics.CGRect_size_get, _CoreGraphics.CGRect_size_set)
    def getMinX(*args): return _CoreGraphics.CGRect_getMinX(*args)
    def getMidX(*args): return _CoreGraphics.CGRect_getMidX(*args)
    def getMaxX(*args): return _CoreGraphics.CGRect_getMaxX(*args)
    def getMinY(*args): return _CoreGraphics.CGRect_getMinY(*args)
    def getMidY(*args): return _CoreGraphics.CGRect_getMidY(*args)
    def getMaxY(*args): return _CoreGraphics.CGRect_getMaxY(*args)
    def getWidth(*args): return _CoreGraphics.CGRect_getWidth(*args)
    def getHeight(*args): return _CoreGraphics.CGRect_getHeight(*args)
    def equalToRect(*args): return _CoreGraphics.CGRect_equalToRect(*args)
    def standardize(*args): return _CoreGraphics.CGRect_standardize(*args)
    def isEmpty(*args): return _CoreGraphics.CGRect_isEmpty(*args)
    def isNull(*args): return _CoreGraphics.CGRect_isNull(*args)
    def isInfinite(*args): return _CoreGraphics.CGRect_isInfinite(*args)
    def inset(*args): return _CoreGraphics.CGRect_inset(*args)
    def integral(*args): return _CoreGraphics.CGRect_integral(*args)
    def union(*args): return _CoreGraphics.CGRect_Union(*args)
    def intersection(*args): return _CoreGraphics.CGRect_intersection(*args)
    def offset(*args): return _CoreGraphics.CGRect_offset(*args)
    def divide(*args): return _CoreGraphics.CGRect_divide(*args)
    def containsPoint(*args): return _CoreGraphics.CGRect_containsPoint(*args)
    def containsRect(*args): return _CoreGraphics.CGRect_containsRect(*args)
    def intersectsRect(*args): return _CoreGraphics.CGRect_intersectsRect(*args)
    def applyAffineTransform(*args): return _CoreGraphics.CGRect_applyAffineTransform(*args)
    def __init__(self, *args): 
        this = _CoreGraphics.new_CGRect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CoreGraphics.delete_CGRect
    __del__ = lambda self : None;
CGRect_swigregister = _CoreGraphics.CGRect_swigregister
CGRect_swigregister(CGRect)

CGPointMake = _CoreGraphics.CGPointMake
CGSizeMake = _CoreGraphics.CGSizeMake
CGRectMake = _CoreGraphics.CGRectMake
class CGColorSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGColorSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGColorSpace, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGColorSpace
    __del__ = lambda self : None;
    def getNumberOfComponents(*args): return _CoreGraphics.CGColorSpace_getNumberOfComponents(*args)
CGColorSpace_swigregister = _CoreGraphics.CGColorSpace_swigregister
CGColorSpace_swigregister(CGColorSpace)
CGPointZero = cvar.CGPointZero
CGSizeZero = cvar.CGSizeZero
CGRectZero = cvar.CGRectZero
CGRectNull = cvar.CGRectNull
CGRectInfinite = cvar.CGRectInfinite

kCGColorSpaceUserGray = _CoreGraphics.kCGColorSpaceUserGray
kCGColorSpaceUserRGB = _CoreGraphics.kCGColorSpaceUserRGB
kCGColorSpaceUserCMYK = _CoreGraphics.kCGColorSpaceUserCMYK
kCGColorSpaceGenericGray = _CoreGraphics.kCGColorSpaceGenericGray
kCGColorSpaceGenericRGB = _CoreGraphics.kCGColorSpaceGenericRGB
kCGColorSpaceGenericCMYK = _CoreGraphics.kCGColorSpaceGenericCMYK
CGColorSpaceCreateDeviceGray = _CoreGraphics.CGColorSpaceCreateDeviceGray
CGColorSpaceCreateDeviceRGB = _CoreGraphics.CGColorSpaceCreateDeviceRGB
CGColorSpaceCreateDeviceCMYK = _CoreGraphics.CGColorSpaceCreateDeviceCMYK
CGColorSpaceCreateCalibratedGray = _CoreGraphics.CGColorSpaceCreateCalibratedGray
CGColorSpaceCreateCalibratedRGB = _CoreGraphics.CGColorSpaceCreateCalibratedRGB
CGColorSpaceCreateLab = _CoreGraphics.CGColorSpaceCreateLab
CGColorSpaceCreateIndexed = _CoreGraphics.CGColorSpaceCreateIndexed
CGColorSpaceCreatePattern = _CoreGraphics.CGColorSpaceCreatePattern
CGColorSpaceCreateWithPlatformColorSpace = _CoreGraphics.CGColorSpaceCreateWithPlatformColorSpace
CGColorSpaceCreateWithName = _CoreGraphics.CGColorSpaceCreateWithName
class CGDataConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDataConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDataConsumer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGDataConsumer
    __del__ = lambda self : None;
CGDataConsumer_swigregister = _CoreGraphics.CGDataConsumer_swigregister
CGDataConsumer_swigregister(CGDataConsumer)

CGDataConsumerCreateWithFilename = _CoreGraphics.CGDataConsumerCreateWithFilename
class CGDataProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDataProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDataProvider, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGDataProvider
    __del__ = lambda self : None;
CGDataProvider_swigregister = _CoreGraphics.CGDataProvider_swigregister
CGDataProvider_swigregister(CGDataProvider)

CGDataProviderCreateWithFilename = _CoreGraphics.CGDataProviderCreateWithFilename
CGDataProviderCreateWithString = _CoreGraphics.CGDataProviderCreateWithString
class CGImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGImage, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGImage
    __del__ = lambda self : None;
    def isMask(*args): return _CoreGraphics.CGImage_isMask(*args)
    def getWidth(*args): return _CoreGraphics.CGImage_getWidth(*args)
    def getHeight(*args): return _CoreGraphics.CGImage_getHeight(*args)
    def getBitsPerComponent(*args): return _CoreGraphics.CGImage_getBitsPerComponent(*args)
    def getBitsPerPixel(*args): return _CoreGraphics.CGImage_getBitsPerPixel(*args)
    def getBytesPerRow(*args): return _CoreGraphics.CGImage_getBytesPerRow(*args)
    def getColorSpace(*args): return _CoreGraphics.CGImage_getColorSpace(*args)
    def getAlphaInfo(*args): return _CoreGraphics.CGImage_getAlphaInfo(*args)
    def getDataProvider(*args): return _CoreGraphics.CGImage_getDataProvider(*args)
    def getDecode(*args): return _CoreGraphics.CGImage_getDecode(*args)
    def getShouldInterpolate(*args): return _CoreGraphics.CGImage_getShouldInterpolate(*args)
    def getRenderingIntent(*args): return _CoreGraphics.CGImage_getRenderingIntent(*args)
    def getBitmapInfo(*args): return _CoreGraphics.CGImage_getBitmapInfo(*args)
    def createWithImageInRect(*args): return _CoreGraphics.CGImage_createWithImageInRect(*args)
    def createWithMask(*args): return _CoreGraphics.CGImage_createWithMask(*args)
    def createWithMaskingColors(*args): return _CoreGraphics.CGImage_createWithMaskingColors(*args)
CGImage_swigregister = _CoreGraphics.CGImage_swigregister
CGImage_swigregister(CGImage)

CGImageCreate = _CoreGraphics.CGImageCreate
CGImageMaskCreate = _CoreGraphics.CGImageMaskCreate
CGImageCreateWithJPEGDataProvider = _CoreGraphics.CGImageCreateWithJPEGDataProvider
CGImageCreateWithPNGDataProvider = _CoreGraphics.CGImageCreateWithPNGDataProvider
CGImageImport = _CoreGraphics.CGImageImport
CGImageImportWithAffineTransform = _CoreGraphics.CGImageImportWithAffineTransform
class CGShading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGShading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGShading, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGShading
    __del__ = lambda self : None;
CGShading_swigregister = _CoreGraphics.CGShading_swigregister
CGShading_swigregister(CGShading)

class CGPattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPattern, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPattern
    __del__ = lambda self : None;
CGPattern_swigregister = _CoreGraphics.CGPattern_swigregister
CGPattern_swigregister(CGPattern)

CGPatternBegin = _CoreGraphics.CGPatternBegin
CGPatternGetContext = _CoreGraphics.CGPatternGetContext
CGPatternEnd = _CoreGraphics.CGPatternEnd
class CGColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGColor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGColor
    __del__ = lambda self : None;
    def equalToColor(*args): return _CoreGraphics.CGColor_equalToColor(*args)
    def getNumberOfComponents(*args): return _CoreGraphics.CGColor_getNumberOfComponents(*args)
    def getComponents(*args): return _CoreGraphics.CGColor_getComponents(*args)
    def getAlpha(*args): return _CoreGraphics.CGColor_getAlpha(*args)
    def getColorSpace(*args): return _CoreGraphics.CGColor_getColorSpace(*args)
    def getPattern(*args): return _CoreGraphics.CGColor_getPattern(*args)
CGColor_swigregister = _CoreGraphics.CGColor_swigregister
CGColor_swigregister(CGColor)

CGColorCreate = _CoreGraphics.CGColorCreate
CGColorCreateWithPattern = _CoreGraphics.CGColorCreateWithPattern
class CGPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPath, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPath
    __del__ = lambda self : None;
    def equalToPath(*args): return _CoreGraphics.CGPath_equalToPath(*args)
    def isEmpty(*args): return _CoreGraphics.CGPath_isEmpty(*args)
    def isRect(*args): return _CoreGraphics.CGPath_isRect(*args)
    def getCurrentPoint(*args): return _CoreGraphics.CGPath_getCurrentPoint(*args)
    def getBoundingBox(*args): return _CoreGraphics.CGPath_getBoundingBox(*args)
    def containsPoint(*args): return _CoreGraphics.CGPath_containsPoint(*args)
    def moveToPoint(*args): return _CoreGraphics.CGPath_moveToPoint(*args)
    def addLineToPoint(*args): return _CoreGraphics.CGPath_addLineToPoint(*args)
    def addQuadCurveToPoint(*args): return _CoreGraphics.CGPath_addQuadCurveToPoint(*args)
    def addCurveToPoint(*args): return _CoreGraphics.CGPath_addCurveToPoint(*args)
    def closeSubpath(*args): return _CoreGraphics.CGPath_closeSubpath(*args)
    def addRect(*args): return _CoreGraphics.CGPath_addRect(*args)
    def addRects(*args): return _CoreGraphics.CGPath_addRects(*args)
    def addLines(*args): return _CoreGraphics.CGPath_addLines(*args)
    def addEllipseInRect(*args): return _CoreGraphics.CGPath_addEllipseInRect(*args)
    def addArc(*args): return _CoreGraphics.CGPath_addArc(*args)
    def addArcToPoint(*args): return _CoreGraphics.CGPath_addArcToPoint(*args)
    def addPath(*args): return _CoreGraphics.CGPath_addPath(*args)
CGPath_swigregister = _CoreGraphics.CGPath_swigregister
CGPath_swigregister(CGPath)

CGPathCreateMutable = _CoreGraphics.CGPathCreateMutable
CGPathCreateCopy = _CoreGraphics.CGPathCreateCopy
CGPathCreateMutableCopy = _CoreGraphics.CGPathCreateMutableCopy
class CGContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGContext, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGContext
    __del__ = lambda self : None;
    def saveGState(*args): return _CoreGraphics.CGContext_saveGState(*args)
    def restoreGState(*args): return _CoreGraphics.CGContext_restoreGState(*args)
    def scaleCTM(*args): return _CoreGraphics.CGContext_scaleCTM(*args)
    def translateCTM(*args): return _CoreGraphics.CGContext_translateCTM(*args)
    def rotateCTM(*args): return _CoreGraphics.CGContext_rotateCTM(*args)
    def concatCTM(*args): return _CoreGraphics.CGContext_concatCTM(*args)
    def getCTM(*args): return _CoreGraphics.CGContext_getCTM(*args)
    def setLineWidth(*args): return _CoreGraphics.CGContext_setLineWidth(*args)
    def setLineCap(*args): return _CoreGraphics.CGContext_setLineCap(*args)
    def setLineJoin(*args): return _CoreGraphics.CGContext_setLineJoin(*args)
    def setMiterLimit(*args): return _CoreGraphics.CGContext_setMiterLimit(*args)
    def setLineDash(*args): return _CoreGraphics.CGContext_setLineDash(*args)
    def setFlatness(*args): return _CoreGraphics.CGContext_setFlatness(*args)
    def setAlpha(*args): return _CoreGraphics.CGContext_setAlpha(*args)
    def setBlendMode(*args): return _CoreGraphics.CGContext_setBlendMode(*args)
    def beginPath(*args): return _CoreGraphics.CGContext_beginPath(*args)
    def moveToPoint(*args): return _CoreGraphics.CGContext_moveToPoint(*args)
    def addLineToPoint(*args): return _CoreGraphics.CGContext_addLineToPoint(*args)
    def addCurveToPoint(*args): return _CoreGraphics.CGContext_addCurveToPoint(*args)
    def addQuadCurveToPoint(*args): return _CoreGraphics.CGContext_addQuadCurveToPoint(*args)
    def closePath(*args): return _CoreGraphics.CGContext_closePath(*args)
    def addRect(*args): return _CoreGraphics.CGContext_addRect(*args)
    def addRects(*args): return _CoreGraphics.CGContext_addRects(*args)
    def addLines(*args): return _CoreGraphics.CGContext_addLines(*args)
    def addEllipseInRect(*args): return _CoreGraphics.CGContext_addEllipseInRect(*args)
    def addArc(*args): return _CoreGraphics.CGContext_addArc(*args)
    def addArcToPoint(*args): return _CoreGraphics.CGContext_addArcToPoint(*args)
    def addPath(*args): return _CoreGraphics.CGContext_addPath(*args)
    def replacePathWithStrokedPath(*args): return _CoreGraphics.CGContext_replacePathWithStrokedPath(*args)
    def isPathEmpty(*args): return _CoreGraphics.CGContext_isPathEmpty(*args)
    def getPathCurrentPoint(*args): return _CoreGraphics.CGContext_getPathCurrentPoint(*args)
    def getPathBoundingBox(*args): return _CoreGraphics.CGContext_getPathBoundingBox(*args)
    def pathContainsPoint(*args): return _CoreGraphics.CGContext_pathContainsPoint(*args)
    def drawPath(*args): return _CoreGraphics.CGContext_drawPath(*args)
    def fillPath(*args): return _CoreGraphics.CGContext_fillPath(*args)
    def eoFillPath(*args): return _CoreGraphics.CGContext_eoFillPath(*args)
    def strokePath(*args): return _CoreGraphics.CGContext_strokePath(*args)
    def fillRect(*args): return _CoreGraphics.CGContext_fillRect(*args)
    def fillRects(*args): return _CoreGraphics.CGContext_fillRects(*args)
    def strokeRect(*args): return _CoreGraphics.CGContext_strokeRect(*args)
    def strokeRectWithWidth(*args): return _CoreGraphics.CGContext_strokeRectWithWidth(*args)
    def clearRect(*args): return _CoreGraphics.CGContext_clearRect(*args)
    def fillEllipseInRect(*args): return _CoreGraphics.CGContext_fillEllipseInRect(*args)
    def strokeEllipseInRect(*args): return _CoreGraphics.CGContext_strokeEllipseInRect(*args)
    def strokeLineSegments(*args): return _CoreGraphics.CGContext_strokeLineSegments(*args)
    def clip(*args): return _CoreGraphics.CGContext_clip(*args)
    def eoClip(*args): return _CoreGraphics.CGContext_eoClip(*args)
    def clipToMask(*args): return _CoreGraphics.CGContext_clipToMask(*args)
    def clipToRect(*args): return _CoreGraphics.CGContext_clipToRect(*args)
    def clipToRects(*args): return _CoreGraphics.CGContext_clipToRects(*args)
    def setFillColorWithColor(*args): return _CoreGraphics.CGContext_setFillColorWithColor(*args)
    def setStrokeColorWithColor(*args): return _CoreGraphics.CGContext_setStrokeColorWithColor(*args)
    def setFillColorSpace(*args): return _CoreGraphics.CGContext_setFillColorSpace(*args)
    def setStrokeColorSpace(*args): return _CoreGraphics.CGContext_setStrokeColorSpace(*args)
    def setFillColor(*args): return _CoreGraphics.CGContext_setFillColor(*args)
    def setStrokeColor(*args): return _CoreGraphics.CGContext_setStrokeColor(*args)
    def setFillPattern(*args): return _CoreGraphics.CGContext_setFillPattern(*args)
    def setStrokePattern(*args): return _CoreGraphics.CGContext_setStrokePattern(*args)
    def setPatternPhase(*args): return _CoreGraphics.CGContext_setPatternPhase(*args)
    def setGrayFillColor(*args): return _CoreGraphics.CGContext_setGrayFillColor(*args)
    def setGrayStrokeColor(*args): return _CoreGraphics.CGContext_setGrayStrokeColor(*args)
    def setRGBFillColor(*args): return _CoreGraphics.CGContext_setRGBFillColor(*args)
    def setRGBStrokeColor(*args): return _CoreGraphics.CGContext_setRGBStrokeColor(*args)
    def setCMYKFillColor(*args): return _CoreGraphics.CGContext_setCMYKFillColor(*args)
    def setCMYKStrokeColor(*args): return _CoreGraphics.CGContext_setCMYKStrokeColor(*args)
    def setRenderingIntent(*args): return _CoreGraphics.CGContext_setRenderingIntent(*args)
    def drawImage(*args): return _CoreGraphics.CGContext_drawImage(*args)
    def drawLayerInRect(*args): return _CoreGraphics.CGContext_drawLayerInRect(*args)
    def drawLayerAtPoint(*args): return _CoreGraphics.CGContext_drawLayerAtPoint(*args)
    def getInterpolationQuality(*args): return _CoreGraphics.CGContext_getInterpolationQuality(*args)
    def setInterpolationQuality(*args): return _CoreGraphics.CGContext_setInterpolationQuality(*args)
    def setShadowWithColor(*args): return _CoreGraphics.CGContext_setShadowWithColor(*args)
    def setShadow(*args): return _CoreGraphics.CGContext_setShadow(*args)
    def drawShading(*args): return _CoreGraphics.CGContext_drawShading(*args)
    def setCharacterSpacing(*args): return _CoreGraphics.CGContext_setCharacterSpacing(*args)
    def setTextPosition(*args): return _CoreGraphics.CGContext_setTextPosition(*args)
    def getTextPosition(*args): return _CoreGraphics.CGContext_getTextPosition(*args)
    def setTextMatrix(*args): return _CoreGraphics.CGContext_setTextMatrix(*args)
    def getTextMatrix(*args): return _CoreGraphics.CGContext_getTextMatrix(*args)
    def setTextDrawingMode(*args): return _CoreGraphics.CGContext_setTextDrawingMode(*args)
    def setFontSize(*args): return _CoreGraphics.CGContext_setFontSize(*args)
    def selectFont(*args): return _CoreGraphics.CGContext_selectFont(*args)
    def showText(*args): return _CoreGraphics.CGContext_showText(*args)
    def showGlyphs(*args): return _CoreGraphics.CGContext_showGlyphs(*args)
    def showTextAtPoint(*args): return _CoreGraphics.CGContext_showTextAtPoint(*args)
    def showGlyphsAtPoint(*args): return _CoreGraphics.CGContext_showGlyphsAtPoint(*args)
    def drawPlainTextInRect(*args): return _CoreGraphics.CGContext_drawPlainTextInRect(*args)
    def drawRTFTextInRect(*args): return _CoreGraphics.CGContext_drawRTFTextInRect(*args)
    def drawDocFormatTextInRect(*args): return _CoreGraphics.CGContext_drawDocFormatTextInRect(*args)
    def drawWordMLFormatTextInRect(*args): return _CoreGraphics.CGContext_drawWordMLFormatTextInRect(*args)
    def drawHTMLTextInRect(*args): return _CoreGraphics.CGContext_drawHTMLTextInRect(*args)
    def drawPDFDocument(*args): return _CoreGraphics.CGContext_drawPDFDocument(*args)
    def beginPage(*args): return _CoreGraphics.CGContext_beginPage(*args)
    def endPage(*args): return _CoreGraphics.CGContext_endPage(*args)
    def flush(*args): return _CoreGraphics.CGContext_flush(*args)
    def synchronize(*args): return _CoreGraphics.CGContext_synchronize(*args)
    def setShouldAntialias(*args): return _CoreGraphics.CGContext_setShouldAntialias(*args)
    def setAllowsAntialiasing(*args): return _CoreGraphics.CGContext_setAllowsAntialiasing(*args)
    def setShouldSmoothFonts(*args): return _CoreGraphics.CGContext_setShouldSmoothFonts(*args)
    def beginTransparencyLayer(*args): return _CoreGraphics.CGContext_beginTransparencyLayer(*args)
    def endTransparencyLayer(*args): return _CoreGraphics.CGContext_endTransparencyLayer(*args)
    def getUserSpaceToDeviceSpaceTransform(*args): return _CoreGraphics.CGContext_getUserSpaceToDeviceSpaceTransform(*args)
    def convertPointToDeviceSpace(*args): return _CoreGraphics.CGContext_convertPointToDeviceSpace(*args)
    def convertPointToUserSpace(*args): return _CoreGraphics.CGContext_convertPointToUserSpace(*args)
    def convertSizeToDeviceSpace(*args): return _CoreGraphics.CGContext_convertSizeToDeviceSpace(*args)
    def convertSizeToUserSpace(*args): return _CoreGraphics.CGContext_convertSizeToUserSpace(*args)
    def CGContextConvertRectToDeviceSpace(*args): return _CoreGraphics.CGContext_CGContextConvertRectToDeviceSpace(*args)
    def convertRectToUserSpace(*args): return _CoreGraphics.CGContext_convertRectToUserSpace(*args)
    def finish(self):
      self.flush ()
      if self.thisown:
        _CoreGraphics.delete_CGContext (self)
        self.thisown = 0; 
    def getData(*args): return _CoreGraphics.CGContext_getData(*args)
    def getWidth(*args): return _CoreGraphics.CGContext_getWidth(*args)
    def getHeight(*args): return _CoreGraphics.CGContext_getHeight(*args)
    def getBitsPerComponent(*args): return _CoreGraphics.CGContext_getBitsPerComponent(*args)
    def getBitsPerPixel(*args): return _CoreGraphics.CGContext_getBitsPerPixel(*args)
    def getBytesPerRow(*args): return _CoreGraphics.CGContext_getBytesPerRow(*args)
    def getColorSpace(*args): return _CoreGraphics.CGContext_getColorSpace(*args)
    def getAlphaInfo(*args): return _CoreGraphics.CGContext_getAlphaInfo(*args)
    def createImage(*args): return _CoreGraphics.CGContext_createImage(*args)
    def writeToDataConsumer(*args): return _CoreGraphics.CGContext_writeToDataConsumer(*args)
    def writeToFile(*args): return _CoreGraphics.CGContext_writeToFile(*args)
    def setURLForRect(*args): return _CoreGraphics.CGContext_setURLForRect(*args)
    def addDestinationAtPoint(*args): return _CoreGraphics.CGContext_addDestinationAtPoint(*args)
    def setDestinationForRect(*args): return _CoreGraphics.CGContext_setDestinationForRect(*args)
CGContext_swigregister = _CoreGraphics.CGContext_swigregister
CGContext_swigregister(CGContext)

CGContextFilterCreateDictionary = _CoreGraphics.CGContextFilterCreateDictionary
CGContextMeasurePlainTextInRect = _CoreGraphics.CGContextMeasurePlainTextInRect
CGContextMeasureRTFTextInRect = _CoreGraphics.CGContextMeasureRTFTextInRect
CGContextMeasureDocFormatTextInRect = _CoreGraphics.CGContextMeasureDocFormatTextInRect
CGContextMeasureWordMLFormatTextInRect = _CoreGraphics.CGContextMeasureWordMLFormatTextInRect
CGContextMeasureHTMLTextInRect = _CoreGraphics.CGContextMeasureHTMLTextInRect
CGBitmapContextCreateWithColor = _CoreGraphics.CGBitmapContextCreateWithColor
kCGImageFormatPNG = _CoreGraphics.kCGImageFormatPNG
kCGImageFormatJPEG = _CoreGraphics.kCGImageFormatJPEG
kCGImageFormatGIF = _CoreGraphics.kCGImageFormatGIF
kCGImageFormatTIFF = _CoreGraphics.kCGImageFormatTIFF
CGPDFContextCreateWithFilename = _CoreGraphics.CGPDFContextCreateWithFilename
class CGPDFDictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFDictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFDictionary, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getCount(*args): return _CoreGraphics.CGPDFDictionary_getCount(*args)
    def getKeys(*args): return _CoreGraphics.CGPDFDictionary_getKeys(*args)
    def getBoolean(*args): return _CoreGraphics.CGPDFDictionary_getBoolean(*args)
    def getInteger(*args): return _CoreGraphics.CGPDFDictionary_getInteger(*args)
    def getNumber(*args): return _CoreGraphics.CGPDFDictionary_getNumber(*args)
    def getName(*args): return _CoreGraphics.CGPDFDictionary_getName(*args)
    def getString(*args): return _CoreGraphics.CGPDFDictionary_getString(*args)
    def getArray(*args): return _CoreGraphics.CGPDFDictionary_getArray(*args)
    def getDictionary(*args): return _CoreGraphics.CGPDFDictionary_getDictionary(*args)
    def getStream(*args): return _CoreGraphics.CGPDFDictionary_getStream(*args)
CGPDFDictionary_swigregister = _CoreGraphics.CGPDFDictionary_swigregister
CGPDFDictionary_swigregister(CGPDFDictionary)

class CGPDFArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFArray, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getCount(*args): return _CoreGraphics.CGPDFArray_getCount(*args)
    def getNull(*args): return _CoreGraphics.CGPDFArray_getNull(*args)
    def getBoolean(*args): return _CoreGraphics.CGPDFArray_getBoolean(*args)
    def getInteger(*args): return _CoreGraphics.CGPDFArray_getInteger(*args)
    def getNumber(*args): return _CoreGraphics.CGPDFArray_getNumber(*args)
    def getName(*args): return _CoreGraphics.CGPDFArray_getName(*args)
    def getString(*args): return _CoreGraphics.CGPDFArray_getString(*args)
    def getArray(*args): return _CoreGraphics.CGPDFArray_getArray(*args)
    def getDictionary(*args): return _CoreGraphics.CGPDFArray_getDictionary(*args)
    def getStream(*args): return _CoreGraphics.CGPDFArray_getStream(*args)
CGPDFArray_swigregister = _CoreGraphics.CGPDFArray_swigregister
CGPDFArray_swigregister(CGPDFArray)

class CGPDFContentStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFContentStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFContentStream, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPDFContentStream
    __del__ = lambda self : None;
    def retain(*args): return _CoreGraphics.CGPDFContentStream_retain(*args)
    def release(*args): return _CoreGraphics.CGPDFContentStream_release(*args)
    def getStreams(*args): return _CoreGraphics.CGPDFContentStream_getStreams(*args)
    def getResource(*args): return _CoreGraphics.CGPDFContentStream_getResource(*args)
CGPDFContentStream_swigregister = _CoreGraphics.CGPDFContentStream_swigregister
CGPDFContentStream_swigregister(CGPDFContentStream)

CGPDFContentStreamCreateWithPage = _CoreGraphics.CGPDFContentStreamCreateWithPage
class CGPDFOperatorTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFOperatorTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFOperatorTable, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPDFOperatorTable
    __del__ = lambda self : None;
    def retain(*args): return _CoreGraphics.CGPDFOperatorTable_retain(*args)
    def release(*args): return _CoreGraphics.CGPDFOperatorTable_release(*args)
    def setCallback(*args): return _CoreGraphics.CGPDFOperatorTable_setCallback(*args)
CGPDFOperatorTable_swigregister = _CoreGraphics.CGPDFOperatorTable_swigregister
CGPDFOperatorTable_swigregister(CGPDFOperatorTable)

CGPDFOperatorTableCreate = _CoreGraphics.CGPDFOperatorTableCreate
class CGPDFScanner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFScanner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFScanner, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPDFScanner
    __del__ = lambda self : None;
    def release(*args): return _CoreGraphics.CGPDFScanner_release(*args)
    def scan(*args): return _CoreGraphics.CGPDFScanner_scan(*args)
    def getContentStream(*args): return _CoreGraphics.CGPDFScanner_getContentStream(*args)
    def popObject(*args): return _CoreGraphics.CGPDFScanner_popObject(*args)
    def popBoolean(*args): return _CoreGraphics.CGPDFScanner_popBoolean(*args)
    def popInteger(*args): return _CoreGraphics.CGPDFScanner_popInteger(*args)
    def popNumber(*args): return _CoreGraphics.CGPDFScanner_popNumber(*args)
    def popName(*args): return _CoreGraphics.CGPDFScanner_popName(*args)
    def popString(*args): return _CoreGraphics.CGPDFScanner_popString(*args)
    def popArray(*args): return _CoreGraphics.CGPDFScanner_popArray(*args)
    def popDictionary(*args): return _CoreGraphics.CGPDFScanner_popDictionary(*args)
    def popStream(*args): return _CoreGraphics.CGPDFScanner_popStream(*args)
CGPDFScanner_swigregister = _CoreGraphics.CGPDFScanner_swigregister
CGPDFScanner_swigregister(CGPDFScanner)

CGPDFScannerCreate = _CoreGraphics.CGPDFScannerCreate
class CGPDFStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFStream, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getDictionary(*args): return _CoreGraphics.CGPDFStream_getDictionary(*args)
    def copyDataToConsumer(*args): return _CoreGraphics.CGPDFStream_copyDataToConsumer(*args)
CGPDFStream_swigregister = _CoreGraphics.CGPDFStream_swigregister
CGPDFStream_swigregister(CGPDFStream)

CGPDFDataFormatRaw = _CoreGraphics.CGPDFDataFormatRaw
CGPDFDataFormatJPEGEncoded = _CoreGraphics.CGPDFDataFormatJPEGEncoded
class CGPDFPage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFPage, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPDFPage
    __del__ = lambda self : None;
    def getDocument(*args): return _CoreGraphics.CGPDFPage_getDocument(*args)
    def getPageNumber(*args): return _CoreGraphics.CGPDFPage_getPageNumber(*args)
    def getBoxRect(*args): return _CoreGraphics.CGPDFPage_getBoxRect(*args)
    def getRotationAngle(*args): return _CoreGraphics.CGPDFPage_getRotationAngle(*args)
    def getDrawingTransform(*args): return _CoreGraphics.CGPDFPage_getDrawingTransform(*args)
    def getDictionary(*args): return _CoreGraphics.CGPDFPage_getDictionary(*args)
CGPDFPage_swigregister = _CoreGraphics.CGPDFPage_swigregister
CGPDFPage_swigregister(CGPDFPage)

class CGPDFDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPDFDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPDFDocument, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPDFDocument
    __del__ = lambda self : None;
    def getVersion(*args): return _CoreGraphics.CGPDFDocument_getVersion(*args)
    def isEncrypted(*args): return _CoreGraphics.CGPDFDocument_isEncrypted(*args)
    def unlockWithPassword(*args): return _CoreGraphics.CGPDFDocument_unlockWithPassword(*args)
    def isUnlocked(*args): return _CoreGraphics.CGPDFDocument_isUnlocked(*args)
    def allowsPrinting(*args): return _CoreGraphics.CGPDFDocument_allowsPrinting(*args)
    def allowsCopying(*args): return _CoreGraphics.CGPDFDocument_allowsCopying(*args)
    def getNumberOfPages(*args): return _CoreGraphics.CGPDFDocument_getNumberOfPages(*args)
    def getPage(*args): return _CoreGraphics.CGPDFDocument_getPage(*args)
    def getCatalog(*args): return _CoreGraphics.CGPDFDocument_getCatalog(*args)
    def getInfo(*args): return _CoreGraphics.CGPDFDocument_getInfo(*args)
    def getID(*args): return _CoreGraphics.CGPDFDocument_getID(*args)
    def getMediaBox(*args): return _CoreGraphics.CGPDFDocument_getMediaBox(*args)
    def getCropBox(*args): return _CoreGraphics.CGPDFDocument_getCropBox(*args)
    def getBleedBox(*args): return _CoreGraphics.CGPDFDocument_getBleedBox(*args)
    def getTrimBox(*args): return _CoreGraphics.CGPDFDocument_getTrimBox(*args)
    def getArtBox(*args): return _CoreGraphics.CGPDFDocument_getArtBox(*args)
    def getRotationAngle(*args): return _CoreGraphics.CGPDFDocument_getRotationAngle(*args)
CGPDFDocument_swigregister = _CoreGraphics.CGPDFDocument_swigregister
CGPDFDocument_swigregister(CGPDFDocument)

CGPDFDocumentCreateWithProvider = _CoreGraphics.CGPDFDocumentCreateWithProvider
class CGPSConverter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGPSConverter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGPSConverter, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreGraphics.delete_CGPSConverter
    __del__ = lambda self : None;
    def convert(*args): return _CoreGraphics.CGPSConverter_convert(*args)
    def abort(*args): return _CoreGraphics.CGPSConverter_abort(*args)
    def isConverting(*args): return _CoreGraphics.CGPSConverter_isConverting(*args)
CGPSConverter_swigregister = _CoreGraphics.CGPSConverter_swigregister
CGPSConverter_swigregister(CGPSConverter)

CGPSConverterCreateWithoutCallbacks = _CoreGraphics.CGPSConverterCreateWithoutCallbacks
CGAllowWindowServerConnections = _CoreGraphics.CGAllowWindowServerConnections


